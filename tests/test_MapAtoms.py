#AUTHOR: Ariadni Boziki


import unittest
from unittest.mock import patch, MagicMock
from THeSeuSS import MapAtoms as mapat
import spglib
import numpy as np


class Test_spglibProcessor(unittest.TestCase):

    def setUp(self):

        self.aims_geom_input = """\
        lattice_vector      5.00515809      0.00000001     -0.00000000
        lattice_vector      0.00000001      5.00513952      0.00000002
        lattice_vector     -0.00000000      0.00000002      5.00514615
        atom_frac       0.20417660      0.20417663      0.20417506 N
        atom_frac       0.29582343      0.79582337      0.70417510 N
        atom_frac       0.79582343      0.70417665      0.29582494 N
        atom_frac       0.70417654      0.29582335      0.79582490 N
        atom_frac       0.36746575      0.27386801      0.10165952 H
        atom_frac       0.13253426      0.72613200      0.60165958 H
        atom_frac       0.63253429      0.77386804      0.39834048 H
        atom_frac       0.86746570      0.22613197      0.89834042 H
        atom_frac       0.10166131      0.36746612      0.27386686 H
        atom_frac       0.60166125      0.13253386      0.72613311 H
        atom_frac       0.39833871      0.63253387      0.77386688 H
        atom_frac       0.89833873      0.86746614      0.22613314 H
        atom_frac       0.27386726      0.10165955      0.36746394 H
        atom_frac       0.72613277      0.60165958      0.13253607 H
        atom_frac       0.77386719      0.39834043      0.63253602 H
        atom_frac       0.22613279      0.89834044      0.86746398 H\
        """
        
        self.mock_pol = np.array([
            [14.4, -5.4, 10.45, 8.4, -6.75, -15.55],
            [11., 14.4, -5.25, -6.75, -15.55, 8.4], 
            [-5.45, 11.05, 14.4, -15.5, 8.4, -6.75],
            [-20.2, -5.55, -12.5, -6.95, 12.35, 3.95],
            [-6.75, -3.85, -5.5, -2.05, 5.4, 1.75],
            [16.6, 5.65, 7.95, 6.2, -7.15, -3.55],
            [8.1, 17.2, 4.75, -7.15, -3.55, 6.15],
            [-12.45, -20.5, -3.9, 12.35, 4., -6.9],
            [-5.25, -6.8, -3.9, 5.45, 1.75, -2.05],
            [-3.4, -5.35, -6.9, 1.75, -2.05, 5.4],
            [5.45, 7.9, 17., -3.55, 6.2, -7.15],
            [-4.45, -12.35, -20.45, 3.95, -6.9, 12.35]
        ])

        self.mock_cartesian_pol = np.array([
            [ 1.37474130e-02, -1.51882600e-04, -1.84473450e-04],
            [-1.84435200e-04,  1.37472855e-02, -1.51904400e-04],
            [-1.51906750e-04, -1.84483150e-04,  1.37473751e-02],
            [-4.53422490e-03, -2.93924300e-04,  1.66247750e-03],
            [-8.71959100e-05, -2.63283770e-03, -4.81910700e-04],
            [ 2.87578330e-03,  4.00521050e-04, -6.58117200e-03],
            [-6.58115415e-03,  2.87569555e-03,  4.00506500e-04],
            [ 1.66240805e-03, -4.53409560e-03, -2.93913600e-04],
            [-4.81927950e-04, -8.71837529e-05, -2.63284000e-03],
            [-2.63284720e-03, -4.81921950e-04, -8.71913866e-05],
            [ 4.00507200e-04, -6.58116480e-03,  2.87574050e-03],
            [-2.93920350e-04,  1.66244565e-03, -4.53417785e-03]
        ])

        self.mock_element_axis_coord = np.array([
            ['0', '1'],
            ['0', '2'],
            ['0', '3'],
            ['32', '1'],
            ['32', '2'],
            ['32', '3'],
            ['64', '1'],
            ['64', '2'],
            ['64', '3'],
            ['96', '1'],
            ['96', '2'],
            ['96', '3']
        ])

        self.mapatoms = mapat.spglibProcessor(code="aims")

    @patch('spglib.get_symmetry_dataset')
    @patch('THeSeuSS.Coordinates.ConversionUnitsCoordinates')
    @patch('THeSeuSS.InputsPreparation.GeometryProcessor')
    def test_get_international_space_group_number(self, mock_geometry_processor, mock_conversion, mock_spglib):

        mock_conversion_instance = mock_conversion.return_value
        mock_conversion_instance.cartesian_to_fractional_FHIaims.return_value = 'path'

        mock_geometry_processor_instance = mock_geometry_processor.return_value
        mock_geometry_processor_instance.number_of_atoms.return_value = 16
        mock_geometry_processor_instance.read_lattice.return_value = [
            [5.00515809, 0.00000001, -0.00000000],
            [0.00000001, 5.00513952, 0.00000002],
            [-0.00000000, 0.00000002, 5.00514615]
        ]
        mock_geometry_processor_instance.read_coordinates.return_value = [
            [0.20417660, 0.20417663, 0.20417506],
            [0.29582343, 0.79582337, 0.70417510],
            [0.79582343, 0.70417665, 0.29582494],
            [0.70417654, 0.29582335, 0.79582490],
            [0.36746575, 0.27386801, 0.10165952],
            [0.13253426, 0.72613200, 0.60165958],
            [0.63253429, 0.77386804, 0.39834048],
            [0.86746570, 0.22613197, 0.89834042],
            [0.10166131, 0.36746612, 0.27386686],
            [0.60166125, 0.13253386, 0.72613311],
            [0.39833871, 0.63253387, 0.77386688],
            [0.89833873, 0.86746614, 0.22613314],
            [0.27386726, 0.10165955, 0.36746394],
            [0.72613277, 0.60165958, 0.13253607],
            [0.77386719, 0.39834043, 0.63253602],
            [0.22613279, 0.89834044, 0.86746398]
        ]
        mock_geometry_processor_instance.read_the_atom_type.return_value = ([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], ["N", "N", "N", 'N', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        mock_spglib.return_value = {"number": 198}
        space_group_number = self.mapatoms.get_international_space_group_number('path')
        self.assertEqual(space_group_number, 198)

    @patch('THeSeuSS.InputsPreparation.GeometryProcessor')
    @patch('THeSeuSS.MapAtoms.spglibProcessor._check_similarities_of_coord')
    @patch.object(mapat.spglibProcessor, '_equivalent_symmetry_atoms', new_callable=MagicMock)
    @patch.object(mapat.spglibProcessor, '_merge_arrays', new_callable=MagicMock)
    def test_map_properties_of_equivalent_atoms(self, mock_merge_arrays, mock_equiv_atoms, mock_check_similarities, mock_geometry_processor):
        
        mock_geometry_processor_instance = mock_geometry_processor.return_value
        mock_geometry_processor_instance.number_of_atoms.return_value = 16
        mock_geometry_processor_instance.read_lattice.return_value = [
            [5.00515809, 0.00000001, -0.00000000],
            [0.00000001, 5.00513952, 0.00000002],
            [-0.00000000, 0.00000002, 5.00514615]
        ]
        mock_geometry_processor_instance.read_coordinates.return_value = [
            [0.20417660, 0.20417663, 0.20417506],
            [0.29582343, 0.79582337, 0.70417510],
            [0.79582343, 0.70417665, 0.29582494],
            [0.70417654, 0.29582335, 0.79582490],
            [0.36746575, 0.27386801, 0.10165952],
            [0.13253426, 0.72613200, 0.60165958],
            [0.63253429, 0.77386804, 0.39834048],
            [0.86746570, 0.22613197, 0.89834042],
            [0.10166131, 0.36746612, 0.27386686],
            [0.60166125, 0.13253386, 0.72613311],
            [0.39833871, 0.63253387, 0.77386688],
            [0.89833873, 0.86746614, 0.22613314],
            [0.27386726, 0.10165955, 0.36746394],
            [0.72613277, 0.60165958, 0.13253607],
            [0.77386719, 0.39834043, 0.63253602],
            [0.22613279, 0.89834044, 0.86746398]
        ]
        mock_geometry_processor_instance.read_the_atom_type.return_value = ([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], ["N", "N", "N", 'N', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        mock_equiv_atoms.equivalent_atoms = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96])

        mock_merge_arrays.pol_extended =  np.array([[14.4, -5.4, 10.45, 8.4, -6.75, -15.55, '0', '1'],
                [11., 14.4, -5.25, -6.75, -15.55, 8.4, '0', '2'], 
                [-5.45, 11.05, 14.4, -15.5, 8.4, -6.75, '0', '3'],
                [-20.2, -5.55, -12.5, -6.95, 12.35, 3.95, '32', '1'],
                [-6.75, -3.85, -5.5, -2.05, 5.4, 1.75, '32', '2'],
                [16.6, 5.65, 7.95, 6.2, -7.15, -3.55, '32', '3'],
                [8.1, 17.2, 4.75, -7.15, -3.55, 6.15, '64', '1'],
                [-12.45, -20.5, -3.9, 12.35, 4., -6.9, '64', '2'],
                [-5.25, -6.8, -3.9, 5.45, 1.75, -2.05, '64', '3'],
                [-3.4, -5.35, -6.9, 1.75, -2.05, 5.4, '96', '1'],
                [5.45, 7.9, 17., -3.55, 6.2, -7.15, '96', '2'],
                [-4.45, -12.35, -20.45, 3.95, -6.9, 12.35, '96', '3']
                ])
        mock_merge_arrays.cartesian_pol_extended = np.array([[ 1.37474130e-02, -1.51882600e-04, -1.84473450e-04, '0', '1'],
                [-1.84435200e-04,  1.37472855e-02, -1.51904400e-04, '0', '2'],
                [-1.51906750e-04, -1.84483150e-04,  1.37473751e-02, '0', '3'],
                [-4.53422490e-03, -2.93924300e-04,  1.66247750e-03, '32', '1'],
                [-8.71959100e-05, -2.63283770e-03, -4.81910700e-04, '32', '2'],
                [ 2.87578330e-03,  4.00521050e-04, -6.58117200e-03, '32', '3'],
                [-6.58115415e-03,  2.87569555e-03,  4.00506500e-04, '64', '1'],
                [1.66240805e-03, -4.53409560e-03, -2.93913600e-04, '64', '2'],
                [-4.81927950e-04, -8.71837529e-05, -2.63284000e-03, '64', '3'],
                [-2.63284720e-03, -4.81921950e-04, -8.71913866e-05, '96', '1'],
                [4.00507200e-04, -6.58116480e-03,  2.87574050e-03, '96', '2'],
                [-2.93920350e-04,  1.66244565e-03, -4.53417785e-03, '96', '3']
                ])

        mock_check_similarities.return_value = True

        pol = np.array([
            [14.4, -5.4, 10.45, 8.4, -6.75, -15.55],
            [11., 14.4, -5.25, -6.75, -15.55, 8.4], 
            [-5.45, 11.05, 14.4, -15.5, 8.4, -6.75],
            [-20.2, -5.55, -12.5, -6.95, 12.35, 3.95],
            [-6.75, -3.85, -5.5, -2.05, 5.4, 1.75],
            [16.6, 5.65, 7.95, 6.2, -7.15, -3.55],
            [8.1, 17.2, 4.75, -7.15, -3.55, 6.15],
            [-12.45, -20.5, -3.9, 12.35, 4., -6.9],
            [-5.25, -6.8, -3.9, 5.45, 1.75, -2.05],
            [-3.4, -5.35, -6.9, 1.75, -2.05, 5.4],
            [5.45, 7.9, 17., -3.55, 6.2, -7.15],
            [-4.45, -12.35, -20.45, 3.95, -6.9, 12.35]
        ])

        cartesian_pol = np.array([
            [ 1.37474130e-02, -1.51882600e-04, -1.84473450e-04],
            [-1.84435200e-04,  1.37472855e-02, -1.51904400e-04],
            [-1.51906750e-04, -1.84483150e-04,  1.37473751e-02],
            [-4.53422490e-03, -2.93924300e-04,  1.66247750e-03],
            [-8.71959100e-05, -2.63283770e-03, -4.81910700e-04],
            [ 2.87578330e-03,  4.00521050e-04, -6.58117200e-03],
            [-6.58115415e-03,  2.87569555e-03,  4.00506500e-04],
            [ 1.66240805e-03, -4.53409560e-03, -2.93913600e-04],
            [-4.81927950e-04, -8.71837529e-05, -2.63284000e-03],
            [-2.63284720e-03, -4.81921950e-04, -8.71913866e-05],
            [ 4.00507200e-04, -6.58116480e-03,  2.87574050e-03],
            [-2.93920350e-04,  1.66244565e-03, -4.53417785e-03]
        ])

        element_axis_coord = np.array([
            ['0', '1'],
            ['0', '2'],
            ['0', '3'],
            ['32', '1'],
            ['32', '2'],
            ['32', '3'],
            ['64', '1'],
            ['64', '2'],
            ['64', '3'],
            ['96', '1'],
            ['96', '2'],
            ['96', '3']
        ])

        self.mapatoms._map_properties_of_equivalent_atoms(pol, cartesian_pol, element_axis_coord)

        mock_merge_arrays.assert_called_once_with(pol, cartesian_pol, element_axis_coord)
